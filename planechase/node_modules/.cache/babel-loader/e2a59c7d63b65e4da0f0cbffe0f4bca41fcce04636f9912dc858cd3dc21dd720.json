{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/InitSession.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from '../tools/fetches.js';\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport './InitSession.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewSession() {\n  _s();\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck;\n  }\n  function updateSearchText(event) {\n    const textVal = event.target.value;\n    // const searchVals = getSearchRequests(`(${textVal.split('\\n').map(entry => {return `name:\"${entry}\"`}).join(' or ')}) and (type:plane or type:phenomenon)`);\n    const searchVals = getSearchRequests(textVal);\n    setSearchText(searchVals);\n  }\n  function getSearchRequests(searchString) {\n    // split the string and add them back unless it goes above 900 chars\n    // any names past the 900 chars will get put into a new search request\n    // scryfall search only supports 1000 characters\n\n    const searchRequests = [];\n    var searchTerms = '(';\n    const splitTerms = searchString.split('\\n').map(entry => {\n      return `name:\"${entry}\"`;\n    });\n    for (var i = 0; i < splitTerms.length; i++) {\n      const term = splitTerms[i];\n      if (searchTerms.length > 1) {\n        searchTerms = searchTerms.concat(' or ', term);\n      } else {\n        searchTerms = searchTerms.concat(term);\n      }\n      if (searchTerms.length > 900 || i >= splitTerms.length - 1) {\n        searchTerms = searchTerms.concat(') and (type:plane or type:phenomenon)');\n        searchRequests.push(searchTerms.slice());\n        searchTerms = '(';\n      }\n    }\n    return searchRequests;\n  }\n  async function handleSearch() {\n    // return results for each search then append them\n    setSearchText(await searchText.map(text => {\n      return searchScryfall(text);\n    }));\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {\n          return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1;\n        });\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, {\n          state: newSession\n        });\n      });\n    });\n  }\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Planechase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter a list of planes and phenomena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Ex:\\nGavony\\nPlanewide Disaster\\nEtc...\",\n        onChange: event => updateSearchText(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        onClick: handleAll,\n        children: \"Give me all the planes!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(NewSession, \"vZjey7JS9Ls8vq9sKy+Fdw1NfuM=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["useState","useNavigate","getAllPlanes","makeNewSession","searchScryfall","shuffleDeck","getMappedPlaneList","planeImages","jsxDEV","_jsxDEV","NewSession","_s","makeShuffledPlanarDeck","planeList","mappedPlaneList","shuffledDeck","updateSearchText","event","textVal","target","value","searchVals","getSearchRequests","setSearchText","searchString","searchRequests","searchTerms","splitTerms","split","map","entry","i","length","term","concat","push","slice","handleSearch","searchText","text","results","console","log","handleAll","inputPlaneList","then","filter","plane","indexOf","name","toLowerCase","shuffledPlanarDeck","firstPlane","pop","newSession","navigate","code","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/InitSession.js"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from '../tools/fetches.js';\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport './InitSession.css';\n\nexport default function NewSession() {\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck\n  }\n\n  function updateSearchText(event) {\n    const textVal = event.target.value;\n    // const searchVals = getSearchRequests(`(${textVal.split('\\n').map(entry => {return `name:\"${entry}\"`}).join(' or ')}) and (type:plane or type:phenomenon)`);\n    const searchVals = getSearchRequests(textVal);\n    setSearchText(searchVals);\n  }\n\n  function getSearchRequests(searchString) {\n    // split the string and add them back unless it goes above 900 chars\n    // any names past the 900 chars will get put into a new search request\n    // scryfall search only supports 1000 characters\n\n    const searchRequests = [];\n    var searchTerms = '(';\n    const splitTerms = searchString.split('\\n').map(entry => {return `name:\"${entry}\"`});\n    for (var i = 0; i < splitTerms.length; i++) {\n      const term = splitTerms[i];\n      if (searchTerms.length > 1) {\n        searchTerms = searchTerms.concat(' or ', term);\n      } else {\n        searchTerms = searchTerms.concat(term);\n      }\n      \n\n      if ((searchTerms.length > 900) || (i >= splitTerms.length - 1)) {\n        searchTerms = searchTerms.concat(') and (type:plane or type:phenomenon)');\n        searchRequests.push(searchTerms.slice());\n        searchTerms = '(';\n      }\n    }\n\n    return searchRequests;\n  }\n\n  async function handleSearch() {\n    // return results for each search then append them\n    setSearchText(await searchText.map(text => {\n      return searchScryfall(text);\n    }));\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1});\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      \n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, { state: newSession });\n      });\n    });\n  }\n\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n\n  return (\n    <div className='controls'>\n      <h1>Planechase</h1>\n      <p>Enter a list of planes and phenomena</p>\n      <div className='input'>\n        <textarea placeholder='Ex:&#10;Gavony&#10;Planewide Disaster&#10;Etc...' onChange={event => updateSearchText(event)} />\n      </div>\n      <div className='buttons'>\n        <button className='submit' onClick={handleSearch}>Search</button>\n        <button className='submit' onClick={handleAll}>Give me all the planes!</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}