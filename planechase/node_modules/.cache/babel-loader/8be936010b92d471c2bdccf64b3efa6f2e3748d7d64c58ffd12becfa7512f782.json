{"ast":null,"code":"import { getMappedPlane, makeFullPlaneUrl } from \"./utils\";\nimport { planeImages } from \"../tools/consts.js\";\nconst dataSource = 'dhuber-cluster-0';\nconst database = 'planechase';\nconst sessionCollection = 'sessions';\nfunction getHeaders() {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Accept', 'application/json');\n  headers.append('Access-Control-Request-Headers', '*');\n  headers.append('Access-Control-Allow-Origin', '*');\n  headers.append('api-key', 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO');\n}\nfunction getHeadersJson() {\n  return {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Request-Headers': '*',\n    'Access-Control-Allow-Origin': '*'\n  };\n\n  // return {\n  //   'Content-Type': 'application/json',\n  //   'Accept': 'application/json',\n  //   'Access-Control-Request-Headers': '*',\n  //   'Access-Control-Allow-Origin': '*',\n  //   'api-key': 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO'\n  // }\n}\nexport async function getSession(sessionCode) {\n  //   curl --location 'https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne' \\\n  // --header 'Content-Type: application/json' \\\n  // --header 'Access-Control-Request-Headers: *' \\\n  // --header 'api-key: kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO' \\\n  // --header 'Accept: application/json' \\\n  // --data '{\n  //       \"dataSource\": \"dhuber-cluster-0\",\n  //       \"database\": \"planechase\",\n  //       \"collection\": \"sessions\",\n  //       \"filter\": { \"_id\": \"ABCD\"  }\n  //   }'\n\n  console.log('getting session ' + sessionCode);\n  return await fetch(`/planechaseSessions/getSession/${sessionCode}/`).then(response => response.json()).then(data => {\n    console.log(data[0]);\n    const plane = getMappedPlane(data[1].fields, planeImages);\n    return {\n      code: data[0].pk,\n      plane: plane,\n      rollCost: data[0].fields.rollCost,\n      rollResult: data[0].fields.rollResult,\n      planarDeck: data[0].fields.planarDeck\n    };\n  }).catch(error => console.log('error getting sessions: ' + error));\n}\nexport async function makeNewSession(activePlane, planarDeck) {\n  const options = {\n    method: 'POST',\n    headers: getHeadersJson,\n    body: JSON.stringify(planarDeck)\n  };\n  return await fetch(`/planechaseSessions/makeSession/${activePlane.id}/`, options).then(response => response.json()).then(data => {\n    console.log(data[0]);\n    const plane = getMappedPlane(data[1].fields, planeImages);\n    return {\n      code: data[0].pk,\n      plane: plane,\n      rollCost: data[0].fields.rollCost,\n      rollResult: data[0].fields.rollResult,\n      planarDeck: data[0].fields.planarDeck\n    };\n  }).catch(error => console.log('error making session: ' + error));\n}\nexport async function getAllPlanes() {\n  console.log('getAllPlanes');\n  return await fetch(`/planechaseSessions/getWebcamFriendlyPlanes/`).then(response => response.json()).catch(error => console.log('error getting all planes: ' + error));\n}\nexport async function updateSession(sessionCode, data) {\n  const options = {\n    method: 'POST',\n    headers: getHeadersJson,\n    body: JSON.stringify(data)\n  };\n  return await fetch(`/planechaseSessions/updateSession/${sessionCode}/`, options).then(response => response.json()).then(data => {\n    console.log(data[0]);\n    const plane = getMappedPlane(data[1].fields, planeImages);\n    return {\n      code: data[0].pk,\n      plane: plane,\n      rollCost: data[0].fields.rollCost,\n      rollResult: data[0].fields.rollResult,\n      planarDeck: data[0].fields.planarDeck\n    };\n  }).catch(error => console.log('error making session: ' + error));\n}","map":{"version":3,"names":["getMappedPlane","makeFullPlaneUrl","planeImages","dataSource","database","sessionCollection","getHeaders","headers","Headers","append","getHeadersJson","getSession","sessionCode","console","log","fetch","then","response","json","data","plane","fields","code","pk","rollCost","rollResult","planarDeck","catch","error","makeNewSession","activePlane","options","method","body","JSON","stringify","id","getAllPlanes","updateSession"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/tools/mongoApi.js"],"sourcesContent":["import { getMappedPlane, makeFullPlaneUrl } from \"./utils\";\nimport { planeImages } from \"../tools/consts.js\";\n\nconst dataSource = 'dhuber-cluster-0';\nconst database = 'planechase';\nconst sessionCollection = 'sessions';\n\nfunction getHeaders() {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Accept', 'application/json');\n  headers.append('Access-Control-Request-Headers', '*');\n  headers.append('Access-Control-Allow-Origin', '*');\n  headers.append('api-key', 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO');\n}\n\nfunction getHeadersJson() {\n  return {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Access-Control-Request-Headers': '*',\n    'Access-Control-Allow-Origin': '*'\n  }\n\n  // return {\n  //   'Content-Type': 'application/json',\n  //   'Accept': 'application/json',\n  //   'Access-Control-Request-Headers': '*',\n  //   'Access-Control-Allow-Origin': '*',\n  //   'api-key': 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO'\n  // }\n}\n\nexport async function getSession(sessionCode) {\n//   curl --location 'https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne' \\\n// --header 'Content-Type: application/json' \\\n// --header 'Access-Control-Request-Headers: *' \\\n// --header 'api-key: kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO' \\\n// --header 'Accept: application/json' \\\n// --data '{\n//       \"dataSource\": \"dhuber-cluster-0\",\n//       \"database\": \"planechase\",\n//       \"collection\": \"sessions\",\n//       \"filter\": { \"_id\": \"ABCD\"  }\n//   }'\n\n  console.log('getting session ' + sessionCode);\n  return await fetch(`/planechaseSessions/getSession/${sessionCode}/`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data[0]);\n      const plane = getMappedPlane(data[1].fields, planeImages);\n      return {\n        code: data[0].pk,\n        plane: plane,\n        rollCost: data[0].fields.rollCost,\n        rollResult: data[0].fields.rollResult,\n        planarDeck: data[0].fields.planarDeck\n      };\n    })\n    .catch(error => console.log('error getting sessions: ' + error));\n}\n\nexport async function makeNewSession(activePlane, planarDeck) {\n  const options = {\n    method: 'POST',\n    headers: getHeadersJson,\n    body: JSON.stringify(planarDeck)\n  };\n\n  return await fetch(`/planechaseSessions/makeSession/${activePlane.id}/`, options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data[0]);\n      const plane = getMappedPlane(data[1].fields, planeImages);\n      return {\n        code: data[0].pk,\n        plane: plane,\n        rollCost: data[0].fields.rollCost,\n        rollResult: data[0].fields.rollResult,\n        planarDeck: data[0].fields.planarDeck\n      };\n    })\n    .catch(error => console.log('error making session: ' + error));\n}\n\nexport async function getAllPlanes() {\n  console.log('getAllPlanes');\n  return await fetch(`/planechaseSessions/getWebcamFriendlyPlanes/`)\n    .then(response => response.json())\n    .catch(error => console.log('error getting all planes: ' + error));\n}\n\nexport async function updateSession(sessionCode, data) {\n  const options = {\n    method: 'POST',\n    headers: getHeadersJson,\n    body: JSON.stringify(data)\n  };\n\n  return await fetch(`/planechaseSessions/updateSession/${sessionCode}/`, options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data[0]);\n      const plane = getMappedPlane(data[1].fields, planeImages);\n      return {\n        code: data[0].pk,\n        plane: plane,\n        rollCost: data[0].fields.rollCost,\n        rollResult: data[0].fields.rollResult,\n        planarDeck: data[0].fields.planarDeck\n      };\n    })\n    .catch(error => console.log('error making session: ' + error));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}