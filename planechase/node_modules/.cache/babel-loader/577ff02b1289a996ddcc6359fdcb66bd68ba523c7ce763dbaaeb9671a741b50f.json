{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CardDisplay from '../card-display/CardDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, getAndSetNewPlane } from \"../tools/mongoApi.js\";\nimport { dieOptions } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Planechase() {\n  _s();\n  function importAll(r, set) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace(`../img/planes/${set}`, '')] = r(item);\n    });\n    return images;\n  }\n  function shuffleDeck(deck) {\n    console.log('shuffleDeck');\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n  }\n  function handleCardClick() {\n    console.log('handleClick');\n    const discardPile = shownCards;\n    const tempShuffledCardList = shuffledCardList;\n    discardPile.push(tempShuffledCardList.pop());\n    const newSession = getAndSetNewPlane(sessionCode).then(session => {\n      console.log('newSession: ' + session);\n      setShownCards(discardPile);\n      setActiveCard(shownCards[shownCards.length - 1]);\n    });\n  }\n  function makeDecks() {\n    console.log('making decks');\n    const mtgImages = importAll(require.context('../img/planes/mtg', false, /\\.(png|jpe?g|svg)$/), 'mtg');\n    const whoImages = importAll(require.context('../img/planes/who', false, /\\.(png|jpe?g|svg)$/), 'who');\n    const cardImages = [];\n    const tempDeck = cardImages;\n    const shownCards = [];\n    if (sets.indexOf('mtg') > -1) {\n      Object.keys(mtgImages).forEach(key => {\n        cardImages.push(mtgImages[key]);\n      });\n    }\n    if (sets.indexOf('who') > -1) {\n      Object.keys(whoImages).forEach(key => {\n        cardImages.push(whoImages[key]);\n      });\n    }\n    shuffleDeck(tempDeck);\n    shownCards.push(tempDeck.pop());\n    return {\n      cardList: cardImages,\n      shuffledCardList: tempDeck,\n      shownCards: shownCards\n    };\n  }\n  function handleRoll() {\n    console.log('handleRoll');\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCount = count + 1;\n    setCurrentResult(newResult);\n    setCount(newCount);\n  }\n  function handleReset() {\n    console.log('handleReset');\n    setCount(0);\n  }\n  const {\n    sessionCode\n  } = useParams();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [cardList, setCardList] = useState([]);\n  const [shuffledCardList, setShuffledCardList] = useState([]);\n  const [shownCards, setShownCards] = useState([]);\n  const [activeCard, setActiveCard] = useState(null);\n  const [currentResult, setCurrentResult] = useState(dieOptions[0]);\n  const [count, setCount] = useState(0);\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    console.log('rendering card');\n    const stateVars = makeDecks();\n    setCardList(stateVars.cardList);\n    setShuffledCardList(stateVars.shuffledCardList);\n    setShownCards(stateVars.shownCards);\n    setActiveCard(shownCards[shownCards.length - 1]);\n    getSession(sessionCode).then(session => {\n      setSession(session);\n      console.log(session);\n    });\n    console.log('code: ' + sessionCode);\n  }, [sessionCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-code\",\n      children: /*#__PURE__*/_jsxDEV(SessionCode, {\n        sessionCode: session ? session.session : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(Controls, {\n        currentResult: currentResult,\n        count: count,\n        handleRollFunction: handleRoll,\n        handleResetFunction: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(CardDisplay, {\n        activeCard: activeCard,\n        handleClick: handleCardClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(Planechase, \"q9IGFR/A4X+l1Ii0Ox7uaI9j+uA=\", false, function () {\n  return [useParams];\n});\n_c = Planechase;\nvar _c;\n$RefreshReg$(_c, \"Planechase\");","map":{"version":3,"names":["React","useState","useEffect","CardDisplay","Controls","getSession","getAndSetNewPlane","dieOptions","SessionCode","useParams","jsxDEV","_jsxDEV","Planechase","_s","importAll","r","set","images","keys","forEach","item","index","replace","shuffleDeck","deck","console","log","i","length","j","Math","floor","random","temp","handleCardClick","discardPile","shownCards","tempShuffledCardList","shuffledCardList","push","pop","newSession","sessionCode","then","session","setShownCards","setActiveCard","makeDecks","mtgImages","require","context","whoImages","cardImages","tempDeck","sets","indexOf","Object","key","cardList","handleRoll","randomIdx","newResult","newCount","count","setCurrentResult","setCount","handleReset","setSets","setCardList","setShuffledCardList","activeCard","currentResult","setSession","stateVars","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleRollFunction","handleResetFunction","handleClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport CardDisplay from '../card-display/CardDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, getAndSetNewPlane } from \"../tools/mongoApi.js\";\nimport { dieOptions } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\n\nexport default function Planechase() {\n  function importAll(r, set) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace(`../img/planes/${set}`, '')] = r(item);\n    });\n    return images;\n  }\n\n  function shuffleDeck(deck) {\n    console.log('shuffleDeck');\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp; \n    }\n  }\n\n  function handleCardClick() {\n    console.log('handleClick');\n    const discardPile = shownCards;\n    const tempShuffledCardList = shuffledCardList;\n    discardPile.push(tempShuffledCardList.pop());\n    const newSession = getAndSetNewPlane(sessionCode).then(session => {\n      console.log('newSession: ' + session);\n      setShownCards(discardPile);\n      setActiveCard(shownCards[shownCards.length - 1]);\n    });\n  }\n\n  function makeDecks() {\n    console.log('making decks');\n    const mtgImages = importAll(\n      require.context('../img/planes/mtg', false, /\\.(png|jpe?g|svg)$/),\n      'mtg'\n    );\n    const whoImages = importAll(\n      require.context('../img/planes/who', false, /\\.(png|jpe?g|svg)$/),\n      'who'\n    );\n    const cardImages = [];\n    const tempDeck = cardImages;\n    const shownCards = [];\n\n    if (sets.indexOf('mtg') > -1) {\n      Object.keys(mtgImages).forEach((key) => {\n        cardImages.push(mtgImages[key]);\n      });\n    }\n\n    if (sets.indexOf('who') > -1) {\n      Object.keys(whoImages).forEach((key) => {\n        cardImages.push(whoImages[key]);\n      });\n    }\n\n    shuffleDeck(tempDeck);\n    shownCards.push(tempDeck.pop());\n\n    return {\n      cardList: cardImages,\n      shuffledCardList: tempDeck,\n      shownCards: shownCards,\n    };\n  }\n\n  function handleRoll() {\n    console.log('handleRoll');\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCount = count + 1;\n\n    setCurrentResult(newResult);\n    setCount(newCount);\n  }\n\n  function handleReset() {\n    console.log('handleReset');\n    setCount(0);\n  }\n\n\n  const { sessionCode } = useParams();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [cardList, setCardList] = useState([]);\n  const [shuffledCardList, setShuffledCardList] = useState([]);\n  const [shownCards, setShownCards] = useState([]);\n  const [activeCard, setActiveCard] = useState(null);\n  const [currentResult, setCurrentResult] = useState(dieOptions[0]);\n  const [count, setCount] = useState(0);\n  const [session, setSession] = useState(null);\n\n  useEffect(() => {\n    console.log('rendering card');\n    const stateVars = makeDecks();\n    setCardList(stateVars.cardList);\n    setShuffledCardList(stateVars.shuffledCardList);\n    setShownCards(stateVars.shownCards);\n    setActiveCard(shownCards[shownCards.length - 1]);\n    getSession(sessionCode).then(session => {\n      setSession(session);\n      console.log(session);\n    });\n    console.log('code: ' + sessionCode);\n  }, [sessionCode]);\n\n  return (\n    <div className='container'>\n      <div className='session-code'>\n        <SessionCode sessionCode={session ? session.session : null}/>\n      </div>\n      <div className='controls'>\n        <Controls currentResult={currentResult} count={count} handleRollFunction={handleRoll} handleResetFunction={handleReset}/>\n      </div>\n      <div className='display'>\n        <CardDisplay activeCard={activeCard} handleClick={handleCardClick}/>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}