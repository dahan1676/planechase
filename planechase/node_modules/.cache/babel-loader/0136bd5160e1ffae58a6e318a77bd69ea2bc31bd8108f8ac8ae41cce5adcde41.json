{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, updateSession } from \"../tools/mongoApi.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Planechase() {\n  _s();\n  // function importAll(r, set) {\n  //   let images = {};\n  //   r.keys().forEach((item, index) => {\n  //     images[item.replace(`../img/planes/${set}`, '')] = r(item);\n  //   });\n  //   return images;\n  // }\n\n  // function shuffleDeck(deck) {\n  //   for (var i = deck.length - 1; i > 0; i--) {\n  //     var j = Math.floor(Math.random() * (i + 1));\n  //     var temp = deck[i];\n  //     deck[i] = deck[j];\n  //     deck[j] = temp; \n  //   }\n  // }\n\n  function handlePlaneClick() {\n    const newPlanarDeck = planarDeck;\n    const newPlane = newPlanarDeck.pop();\n\n    // const discardPile = shownPlanes;\n    // const tempShuffledPlaneList = shuffledPlaneList;\n    // discardPile.push(tempShuffledPlaneList.pop());\n    // setShownPlanes(discardPile);\n    // const newActivePlane = shownPlanes[shownPlanes.length - 1]\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n    // setPlaneById(session.code, newPlane.id);\n  }\n\n  // function makeDeckAndShownPlanes(planeList) {\n  //   const planeImages = importAll(\n  //     require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/),\n  //     'mtg'\n  //   );\n\n  //   const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n  //   const shuffledDeck = mappedPlaneList;\n  //   const shownPlanes = [];\n\n  //   shuffleDeck(shuffledDeck);\n  //   shownPlanes.push(shuffledDeck.pop());\n  //   setShuffledPlaneList(shuffledDeck);\n  //   setShownPlanes(shownPlanes);\n  //   return {\n  //     shownPlanes: shownPlanes,\n  //     imageMap: planeImages\n  //   }\n  // }\n\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n    setRollResult(newResult);\n    setRollCost(newCost);\n    setRollInfo(session.code, newCost, newResult.name);\n  }\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    setRollInfo(session.code, 0, 'Blank');\n  }\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n  }\n  console.log('init');\n  const {\n    inputSessionCode\n  } = useParams();\n  const {\n    state\n  } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [shuffledPlaneList, setShuffledPlaneList] = useState([]);\n  const [shownPlanes, setShownPlanes] = useState([]);\n  const [activePlane, setActivePlane] = useState(null);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    console.log('using effect');\n    if (state) {\n      setStateInfo(state);\n    } else {\n      getSession(inputSessionCode, planeImages).then(session => {\n        setStateInfo(session);\n      });\n    }\n  }, [state]);\n\n  // useEffect(() => {\n  //   getAllPlanes().then(planeList => {\n  //     console.log('planeList: ' + planeList.length);\n  //     const planeObj = makeDeckAndShownPlanes(planeList);\n  //     const firstPlane = planeObj.shownPlanes[planeObj.shownPlanes.length - 1];\n  //     const sessionCode = session ? session.code : inputSessionCode\n\n  // getSession(sessionCode, firstPlane, planeObj.imageMap).then(session => {\n  //   setSession(session);\n  //   console.log(session);\n  //   setActivePlane(session.plane);\n  //   setCost(session.rollCost);\n  //   setCurrentResult(getDieResultFromName(session.rollResult));\n  //   // setTimeout(() => {\n  //   //   setTimer(timer + 1);\n  //   // }, '2000');\n  // });\n  //   });\n  // }, [inputSessionCode, timer]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-code\",\n      children: /*#__PURE__*/_jsxDEV(SessionCode, {\n        sessionCode: session ? session.code : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(Controls, {\n        currentResult: rollResult,\n        cost: rollCost,\n        handleRollFunction: handleRoll,\n        handleResetFunction: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(PlaneDisplay, {\n        activePlane: activePlane,\n        handleClick: handlePlaneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(Planechase, \"W6gfBtqA6u2CuvCzaWycPYSFlFk=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Planechase;\nvar _c;\n$RefreshReg$(_c, \"Planechase\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","PlaneDisplay","Controls","getSession","setPlaneById","getAllPlanes","setRollInfo","updateSession","dieOptions","planeImages","SessionCode","useParams","getMappedPlaneList","getDieResultFromName","jsxDEV","_jsxDEV","Planechase","_s","handlePlaneClick","newPlanarDeck","planarDeck","newPlane","pop","setActivePlane","setPlanarDeck","updates","plane","session","code","handleRoll","randomIdx","Math","floor","random","length","newResult","newCost","rollCost","setRollResult","setRollCost","name","handleReset","setStateInfo","setSession","rollResult","console","log","inputSessionCode","state","sets","setSets","shuffledPlaneList","setShuffledPlaneList","shownPlanes","setShownPlanes","activePlane","timer","setTimer","then","className","children","sessionCode","fileName","_jsxFileName","lineNumber","columnNumber","currentResult","cost","handleRollFunction","handleResetFunction","handleClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, updateSession } from \"../tools/mongoApi.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\n\nexport default function Planechase() {\n  // function importAll(r, set) {\n  //   let images = {};\n  //   r.keys().forEach((item, index) => {\n  //     images[item.replace(`../img/planes/${set}`, '')] = r(item);\n  //   });\n  //   return images;\n  // }\n\n  // function shuffleDeck(deck) {\n  //   for (var i = deck.length - 1; i > 0; i--) {\n  //     var j = Math.floor(Math.random() * (i + 1));\n  //     var temp = deck[i];\n  //     deck[i] = deck[j];\n  //     deck[j] = temp; \n  //   }\n  // }\n\n  function handlePlaneClick() {\n    const newPlanarDeck = planarDeck;\n    const newPlane = newPlanarDeck.pop();\n\n    // const discardPile = shownPlanes;\n    // const tempShuffledPlaneList = shuffledPlaneList;\n    // discardPile.push(tempShuffledPlaneList.pop());\n    // setShownPlanes(discardPile);\n    // const newActivePlane = shownPlanes[shownPlanes.length - 1]\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n    // setPlaneById(session.code, newPlane.id);\n  }\n\n  // function makeDeckAndShownPlanes(planeList) {\n  //   const planeImages = importAll(\n  //     require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/),\n  //     'mtg'\n  //   );\n\n  //   const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n  //   const shuffledDeck = mappedPlaneList;\n  //   const shownPlanes = [];\n\n  //   shuffleDeck(shuffledDeck);\n  //   shownPlanes.push(shuffledDeck.pop());\n  //   setShuffledPlaneList(shuffledDeck);\n  //   setShownPlanes(shownPlanes);\n  //   return {\n  //     shownPlanes: shownPlanes,\n  //     imageMap: planeImages\n  //   }\n  // }\n\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n\n    setRollResult(newResult);\n    setRollCost(newCost);\n    setRollInfo(session.code, newCost, newResult.name);\n  }\n\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    setRollInfo(session.code, 0, 'Blank');\n  }\n\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n  }\n\n  console.log('init');\n  const { inputSessionCode } = useParams();\n  const { state } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [shuffledPlaneList, setShuffledPlaneList] = useState([]);\n  const [shownPlanes, setShownPlanes] = useState([]);\n  const [activePlane, setActivePlane] = useState(null);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    console.log('using effect');\n    if (state) {\n      setStateInfo(state);\n    } else {\n      getSession(inputSessionCode, planeImages).then(session => {\n        setStateInfo(session);\n      });\n    }\n  }, [state]);\n\n  // useEffect(() => {\n  //   getAllPlanes().then(planeList => {\n  //     console.log('planeList: ' + planeList.length);\n  //     const planeObj = makeDeckAndShownPlanes(planeList);\n  //     const firstPlane = planeObj.shownPlanes[planeObj.shownPlanes.length - 1];\n  //     const sessionCode = session ? session.code : inputSessionCode\n      \n      // getSession(sessionCode, firstPlane, planeObj.imageMap).then(session => {\n      //   setSession(session);\n      //   console.log(session);\n      //   setActivePlane(session.plane);\n      //   setCost(session.rollCost);\n      //   setCurrentResult(getDieResultFromName(session.rollResult));\n      //   // setTimeout(() => {\n      //   //   setTimer(timer + 1);\n      //   // }, '2000');\n      // });\n  //   });\n  // }, [inputSessionCode, timer]);\n\n  return (\n    <div className='container'>\n      <div className='session-code'>\n        <SessionCode sessionCode={session ? session.code : null}/>\n      </div>\n      <div className='controls'>\n        <Controls currentResult={rollResult} cost={rollCost} handleRollFunction={handleRoll} handleResetFunction={handleReset}/>\n      </div>\n      <div className='display'>\n        <PlaneDisplay activePlane={activePlane} handleClick={handlePlaneClick}/>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}