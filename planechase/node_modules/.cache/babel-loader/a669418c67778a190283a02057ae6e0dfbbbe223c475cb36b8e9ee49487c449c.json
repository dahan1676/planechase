{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, updateSession } from \"../tools/mongoApi.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\nimport { getDieResultFromName } from '../tools/utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Planechase() {\n  _s();\n  function handlePlaneClick() {\n    const newPlanarDeck = planarDeck;\n    const newPlane = newPlanarDeck.pop();\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n  }\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n    setRollResult(newResult);\n    setRollCost(newCost);\n    const updates = {\n      rollCost: newCost,\n      rollResult: newResult.name\n    };\n    updateSession(session.code, updates);\n  }\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    const updates = {\n      rollCost: 0,\n      rollResult: 'Blank'\n    };\n    updateSession(session.code, updates);\n  }\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n  }\n  const chatSocket = new WebSocket('ws://' + window.location.host + '/ws/planechasebackend/');\n  chatSocket.onmessage = function (e) {\n    const data = JSON.parse(e.data);\n    const message = data['message'];\n    console.log('message' + message);\n  };\n  chatSocket.onclose = function (e) {\n    console.log('Chat socket closed');\n  };\n  function sendMessage(message) {\n    chatSocket.send(JSON.stringify({\n      'message': message\n    }));\n  }\n  const {\n    inputSessionCode\n  } = useParams();\n  const {\n    state\n  } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [activePlane, setActivePlane] = useState(null);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    console.log('using effect');\n    getSession(inputSessionCode, planeImages).then(session => {\n      setStateInfo(session);\n    });\n    // if (state) {\n    //   setStateInfo(state);\n    // } else {\n    //   getSession(inputSessionCode, planeImages).then(session => {\n    //     setStateInfo(session);\n    //   });\n    // }\n\n    // setTimeout(() => {\n    //   setTimer(timer + 1);\n    // }, '2000');\n    // }, [timer]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"session-code\",\n      children: /*#__PURE__*/_jsxDEV(SessionCode, {\n        sessionCode: session ? session.code : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(Controls, {\n        currentResult: rollResult,\n        cost: rollCost,\n        handleRollFunction: handleRoll,\n        handleResetFunction: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(PlaneDisplay, {\n        activePlane: activePlane,\n        handleClick: handlePlaneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(Planechase, \"Dpz/mXI5bArdYaoJGQsbLrjh8Xg=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Planechase;\nvar _c;\n$RefreshReg$(_c, \"Planechase\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","PlaneDisplay","Controls","getSession","updateSession","dieOptions","planeImages","SessionCode","useParams","getDieResultFromName","jsxDEV","_jsxDEV","Planechase","_s","handlePlaneClick","newPlanarDeck","planarDeck","newPlane","pop","setActivePlane","setPlanarDeck","updates","plane","session","code","handleRoll","randomIdx","Math","floor","random","length","newResult","newCost","rollCost","setRollResult","setRollCost","rollResult","name","handleReset","setStateInfo","setSession","chatSocket","WebSocket","window","location","host","onmessage","e","data","JSON","parse","message","console","log","onclose","sendMessage","send","stringify","inputSessionCode","state","sets","setSets","activePlane","timer","setTimer","then","className","children","sessionCode","fileName","_jsxFileName","lineNumber","columnNumber","currentResult","cost","handleRollFunction","handleResetFunction","handleClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/Planechase.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport { getSession, updateSession } from \"../tools/mongoApi.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport SessionCode from '../session-code/SessionCode.js';\nimport { useParams } from 'react-router-dom';\nimport { getDieResultFromName } from '../tools/utils.js';\n\nexport default function Planechase() {\n  function handlePlaneClick() {\n    const newPlanarDeck = planarDeck;\n    const newPlane = newPlanarDeck.pop();\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n  }\n\n\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n\n    setRollResult(newResult);\n    setRollCost(newCost);\n    const updates = {\n      rollCost: newCost,\n      rollResult: newResult.name\n    };\n    updateSession(session.code, updates);\n  }\n\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    const updates = {\n      rollCost: 0,\n      rollResult: 'Blank'\n    };\n    updateSession(session.code, updates);\n  }\n\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n  }\n\n  const chatSocket = new WebSocket('ws://' + window.location.host + '/ws/planechasebackend/');\n\n  chatSocket.onmessage = function(e) {\n    const data = JSON.parse(e.data);\n    const message = data['message'];\n    console.log('message' + message);\n  }\n\n  chatSocket.onclose = function(e) {\n    console.log('Chat socket closed');\n  }\n\n  function sendMessage(message) {\n    chatSocket.send(JSON.stringify({\n      'message': message\n    }));\n  }\n\n  const { inputSessionCode } = useParams();\n  const { state } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [activePlane, setActivePlane] = useState(null);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    console.log('using effect');\n    getSession(inputSessionCode, planeImages).then(session => {\n      setStateInfo(session);\n    });\n    // if (state) {\n    //   setStateInfo(state);\n    // } else {\n    //   getSession(inputSessionCode, planeImages).then(session => {\n    //     setStateInfo(session);\n    //   });\n    // }\n\n    // setTimeout(() => {\n    //   setTimer(timer + 1);\n    // }, '2000');\n  // }, [timer]);\n  }, []);\n\n  return (\n    <div className='container'>\n      <div className='session-code'>\n        <SessionCode sessionCode={session ? session.code : null}/>\n      </div>\n      <div className='controls'>\n        <Controls currentResult={rollResult} cost={rollCost} handleRollFunction={handleRoll} handleResetFunction={handleReset}/>\n      </div>\n      <div className='display'>\n        <PlaneDisplay activePlane={activePlane} handleClick={handlePlaneClick}/>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}