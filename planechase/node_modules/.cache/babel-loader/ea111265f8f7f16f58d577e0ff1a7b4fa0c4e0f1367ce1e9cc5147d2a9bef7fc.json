{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/ExistingSession.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { getSession, updateSession } from \"../tools/fetches.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport { getDieResultFromName, shuffleDeck } from '../tools/utils.js';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport './ExistingSession.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Planechase() {\n  _s();\n  function handlePlaneClick() {\n    var newPlanarDeck = [];\n    if (planarDeck.length > 0) {\n      newPlanarDeck = planarDeck;\n    } else {\n      const fullDeckCopy = fullPlanarDeck.slice();\n      newPlanarDeck = shuffleDeck(fullDeckCopy);\n    }\n    const newPlane = newPlanarDeck.pop();\n    console.log('newPlane: ' + newPlane);\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n  }\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n    setRollResult(newResult);\n    setRollCost(newCost);\n    const updates = {\n      rollCost: newCost,\n      rollResult: newResult.name\n    };\n    updateSession(session.code, updates);\n  }\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    const updates = {\n      rollCost: 0,\n      rollResult: 'Blank'\n    };\n    updateSession(session.code, updates);\n  }\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n    setFullPlanarDeck(session.planarDeck.slice(0));\n  }\n\n  // const chatSocket = new WebSocket('ws://localhost:8000/session/');\n\n  // chatSocket.onmessage = function(e) {\n  //   const data = JSON.parse(e.data);\n  //   const message = data['message'];\n  //   console.log('message' + message);\n  // }\n\n  // chatSocket.onclose = function(e) {\n  //   console.log('Chat socket closed');\n  // }\n\n  // function sendMessage(message) {\n  //   console.log('sending message');\n  //   chatSocket.send(JSON.stringify({\n  //     'message': message\n  //   }));\n  // }\n\n  const {\n    inputSessionCode\n  } = useParams();\n  const {\n    state\n  } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [activePlane, setActivePlane] = useState(null);\n  const [fullPlanarDeck, setFullPlanarDeck] = useState([]);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n  useEffect(() => {\n    getSession(inputSessionCode, planeImages).then(session => {\n      setStateInfo(session);\n    });\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, '2000');\n  }, [timer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(Controls, {\n        currentResult: rollResult,\n        cost: rollCost,\n        handleRollFunction: handleRoll,\n        handleResetFunction: handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: /*#__PURE__*/_jsxDEV(PlaneDisplay, {\n        activePlane: activePlane,\n        handleClick: handlePlaneClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(Planechase, \"vc/iNf5W0EX982RI4vGfTYsl6gE=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Planechase;\nvar _c;\n$RefreshReg$(_c, \"Planechase\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useParams","getSession","updateSession","dieOptions","planeImages","getDieResultFromName","shuffleDeck","PlaneDisplay","Controls","jsxDEV","_jsxDEV","Planechase","_s","handlePlaneClick","newPlanarDeck","planarDeck","length","fullDeckCopy","fullPlanarDeck","slice","newPlane","pop","console","log","setActivePlane","setPlanarDeck","updates","plane","session","code","handleRoll","randomIdx","Math","floor","random","newResult","newCost","rollCost","setRollResult","setRollCost","rollResult","name","handleReset","setStateInfo","setSession","setFullPlanarDeck","inputSessionCode","state","sets","setSets","activePlane","timer","setTimer","then","setTimeout","className","children","currentResult","cost","handleRollFunction","handleResetFunction","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/ExistingSession.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { getSession, updateSession } from \"../tools/fetches.js\";\nimport { dieOptions, planeImages } from '../tools/consts.js';\nimport { getDieResultFromName, shuffleDeck } from '../tools/utils.js';\nimport PlaneDisplay from '../plane-display/PlaneDisplay.js';\nimport Controls from '../controls/Controls.js';\nimport './ExistingSession.css';\n\nexport default function Planechase() {\n  function handlePlaneClick() {\n    var newPlanarDeck = [];\n    if (planarDeck.length > 0) {\n      newPlanarDeck = planarDeck;\n    } else {\n      const fullDeckCopy = fullPlanarDeck.slice();\n      newPlanarDeck = shuffleDeck(fullDeckCopy);\n    }\n\n    const newPlane = newPlanarDeck.pop();\n    console.log('newPlane: ' + newPlane);\n    setActivePlane(newPlane);\n    setPlanarDeck(newPlanarDeck);\n    \n    const updates = {\n      plane: newPlane,\n      planarDeck: newPlanarDeck\n    };\n    updateSession(session.code, updates);\n  }\n\n\n  function handleRoll() {\n    const randomIdx = Math.floor(Math.random() * dieOptions.length);\n    const newResult = dieOptions[randomIdx];\n    const newCost = rollCost + 1;\n\n    setRollResult(newResult);\n    setRollCost(newCost);\n    const updates = {\n      rollCost: newCost,\n      rollResult: newResult.name\n    };\n    updateSession(session.code, updates);\n  }\n\n  function handleReset() {\n    setRollCost(0);\n    setRollResult(dieOptions[0]);\n    const updates = {\n      rollCost: 0,\n      rollResult: 'Blank'\n    };\n    updateSession(session.code, updates);\n  }\n\n  function setStateInfo(session) {\n    setSession(session);\n    setActivePlane(session.plane);\n    setRollResult(getDieResultFromName(session.rollResult));\n    setRollCost(session.rollCost);\n    setPlanarDeck(session.planarDeck);\n    setFullPlanarDeck(session.planarDeck.slice(0));\n  }\n\n  // const chatSocket = new WebSocket('ws://localhost:8000/session/');\n\n  // chatSocket.onmessage = function(e) {\n  //   const data = JSON.parse(e.data);\n  //   const message = data['message'];\n  //   console.log('message' + message);\n  // }\n\n  // chatSocket.onclose = function(e) {\n  //   console.log('Chat socket closed');\n  // }\n\n  // function sendMessage(message) {\n  //   console.log('sending message');\n  //   chatSocket.send(JSON.stringify({\n  //     'message': message\n  //   }));\n  // }\n\n  const { inputSessionCode } = useParams();\n  const { state } = useLocation();\n  const [sets, setSets] = useState(['mtg', 'who']);\n  const [activePlane, setActivePlane] = useState(null);\n  const [fullPlanarDeck, setFullPlanarDeck] = useState([]);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [rollResult, setRollResult] = useState(dieOptions[0]);\n  const [rollCost, setRollCost] = useState(0);\n  const [session, setSession] = useState(null);\n  const [timer, setTimer] = useState(0);\n\n  useEffect(() => {\n    getSession(inputSessionCode, planeImages).then(session => {\n      setStateInfo(session);\n    });\n    setTimeout(() => {\n      setTimer(timer + 1);\n    }, '2000');\n  }, [timer]);\n\n  return (\n    <div className='container'>\n      <div className='controls'>\n        <Controls currentResult={rollResult} cost={rollCost} handleRollFunction={handleRoll} handleResetFunction={handleReset}/>\n      </div>\n      <div className='display'>\n        <PlaneDisplay activePlane={activePlane} handleClick={handlePlaneClick}/>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}