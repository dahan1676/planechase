{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nexport default function NewSession() {\n  _s();\n  // Make plane deck\n  // Make session\n  // route to planechase component with session id\n\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n    return deck;\n  }\n  function makeDeckAndShownPlanes(planeList) {\n    // const planeImages = importAll(\n    //   require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/),\n    //   'mtg'\n    // );\n\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const tempMappedPlaneList = mappedPlaneList;\n    const shuffledDeck = shuffleDeck(tempMappedPlaneList);\n    return {\n      shuffledDeck: shuffledDeck,\n      imageMap: planeImages\n    };\n  }\n  useEffect(() => {\n    // get planes and make deck\n    // makeSession passing in first planeID and plane deck\n    // route to existingSession component\n\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const planeObj = makeDeckAndShownPlanes(planeList);\n      const firstPlane = planeObj.shuffledDeck.pop();\n      makeNewSession(firstPlane, planeObj.shuffledDeck, planeObj.imageMap).then(session => {\n        setSession(session);\n        console.log(session);\n        // setPlanarDeck(session.planarDeck);\n        // setActivePlane(session.plane);\n        // setCost(session.rollCost);\n        // setCurrentResult(getDieResultFromName(session.rollResult));\n        // setTimeout(() => {\n        //   setTimer(timer + 1);\n        // }, '2000');\n      });\n    });\n  }, []);\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  if (session) {\n    navigate(`/${session.code}`, {\n      state: session\n    });\n  }\n  // return (\n  //   <div>\n  //     <div className='container'>\n  //       <Link to='/49'>new session</Link>\n  //     </div>\n  //     <Outlet />\n  //   </div>\n  // );\n}\n_s(NewSession, \"V48p7J/5iJHBj/toRmd3ZB6sTIQ=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["React","useState","useEffect","Outlet","Link","useNavigate","getSession","setPlaneById","getAllPlanes","setRollInfo","makeNewSession","getMappedPlaneList","getDieResultFromName","planeImages","NewSession","_s","shuffleDeck","deck","i","length","j","Math","floor","random","temp","makeDeckAndShownPlanes","planeList","mappedPlaneList","tempMappedPlaneList","shuffledDeck","imageMap","then","console","log","planeObj","firstPlane","pop","session","setSession","navigate","code","state","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\n\nexport default function NewSession() {\n\n  // Make plane deck\n  // Make session\n  // route to planechase component with session id\n\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp; \n    }\n\n    return deck;\n  }\n\n  function makeDeckAndShownPlanes(planeList) {\n    // const planeImages = importAll(\n    //   require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/),\n    //   'mtg'\n    // );\n\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const tempMappedPlaneList = mappedPlaneList;\n    const shuffledDeck = shuffleDeck(tempMappedPlaneList);\n    return {\n      shuffledDeck: shuffledDeck,\n      imageMap: planeImages\n    }\n  }\n\n  useEffect(() => {\n    // get planes and make deck\n    // makeSession passing in first planeID and plane deck\n    // route to existingSession component\n    \n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const planeObj = makeDeckAndShownPlanes(planeList);\n      const firstPlane = planeObj.shuffledDeck.pop();\n      \n      makeNewSession(firstPlane, planeObj.shuffledDeck, planeObj.imageMap).then(session => {\n        setSession(session);\n        console.log(session);\n        // setPlanarDeck(session.planarDeck);\n        // setActivePlane(session.plane);\n        // setCost(session.rollCost);\n        // setCurrentResult(getDieResultFromName(session.rollResult));\n        // setTimeout(() => {\n        //   setTimer(timer + 1);\n        // }, '2000');\n      });\n    });\n  }, []);\n\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  if (session) {\n    navigate(`/${session.code}`, { state: session });\n  }\n  // return (\n  //   <div>\n  //     <div className='container'>\n  //       <Link to='/49'>new session</Link>\n  //     </div>\n  //     <Outlet />\n  //   </div>\n  // );\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,SAASC,MAAM,EAAEC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAC5D,SAASC,UAAU,EAAEC,YAAY,EAAEC,YAAY,EAAEC,WAAW,EAAEC,cAAc,QAAQ,sBAAsB;AAC1G,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,mBAAmB;AAC5E,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEnC;EACA;EACA;;EAEA,SAASC,WAAWA,CAACC,IAAI,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxC,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAIM,IAAI,GAAGP,IAAI,CAACC,CAAC,CAAC;MAClBD,IAAI,CAACC,CAAC,CAAC,GAAGD,IAAI,CAACG,CAAC,CAAC;MACjBH,IAAI,CAACG,CAAC,CAAC,GAAGI,IAAI;IAChB;IAEA,OAAOP,IAAI;EACb;EAEA,SAASQ,sBAAsBA,CAACC,SAAS,EAAE;IACzC;IACA;IACA;IACA;;IAEA,MAAMC,eAAe,GAAGhB,kBAAkB,CAACe,SAAS,EAAEb,WAAW,CAAC;IAClE,MAAMe,mBAAmB,GAAGD,eAAe;IAC3C,MAAME,YAAY,GAAGb,WAAW,CAACY,mBAAmB,CAAC;IACrD,OAAO;MACLC,YAAY,EAAEA,YAAY;MAC1BC,QAAQ,EAAEjB;IACZ,CAAC;EACH;EAEAX,SAAS,CAAC,MAAM;IACd;IACA;IACA;;IAEAM,YAAY,CAAC,CAAC,CAACuB,IAAI,CAACL,SAAS,IAAI;MAC/BM,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGP,SAAS,CAACP,MAAM,CAAC;MAC7C,MAAMe,QAAQ,GAAGT,sBAAsB,CAACC,SAAS,CAAC;MAClD,MAAMS,UAAU,GAAGD,QAAQ,CAACL,YAAY,CAACO,GAAG,CAAC,CAAC;MAE9C1B,cAAc,CAACyB,UAAU,EAAED,QAAQ,CAACL,YAAY,EAAEK,QAAQ,CAACJ,QAAQ,CAAC,CAACC,IAAI,CAACM,OAAO,IAAI;QACnFC,UAAU,CAACD,OAAO,CAAC;QACnBL,OAAO,CAACC,GAAG,CAACI,OAAO,CAAC;QACpB;QACA;QACA;QACA;QACA;QACA;QACA;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACA,OAAO,EAAEC,UAAU,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMsC,QAAQ,GAAGlC,WAAW,CAAC,CAAC;EAC9B,IAAIgC,OAAO,EAAE;IACXE,QAAQ,CAAE,IAAGF,OAAO,CAACG,IAAK,EAAC,EAAE;MAAEC,KAAK,EAAEJ;IAAQ,CAAC,CAAC;EAClD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAACtB,EAAA,CArEuBD,UAAU;EAAA,QAyDfT,WAAW;AAAA;AAAAqC,EAAA,GAzDN5B,UAAU;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}