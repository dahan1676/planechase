{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nexport default function NewSession() {\n  _s();\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n    return deck;\n  }\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck;\n  }\n\n  // useEffect(() => {\n  //   getAllPlanes().then(planeList => {\n  //     console.log('planeList: ' + planeList.length);\n  //     const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //     const firstPlane = shuffledPlanarDeck.pop();\n\n  //     makeNewSession(firstPlane, shuffledPlanarDeck).then(session => {\n  //       setSession(session);\n  //       console.log(session);\n  //     });\n  //   });\n  // }, []);\n\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  getAllPlanes().then(planeList => {\n    console.log('planeList: ' + planeList.length);\n    const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n    const firstPlane = shuffledPlanarDeck.pop();\n    makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n      setSession(newSession);\n      console.log(newSession);\n      navigate(`/${newSession.code}`, {\n        state: newSession\n      });\n    });\n  });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}\n_s(NewSession, \"gGEFWUD7byeSXeoG5uMe8TeXP7E=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["useState","useEffect","useNavigate","getAllPlanes","makeNewSession","getMappedPlaneList","planeImages","NewSession","_s","shuffleDeck","deck","i","length","j","Math","floor","random","temp","makeShuffledPlanarDeck","planeList","mappedPlaneList","shuffledDeck","session","setSession","navigate","then","console","log","shuffledPlanarDeck","firstPlane","pop","newSession","code","state","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\n\nexport default function NewSession() {\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp; \n    }\n\n    return deck;\n  }\n\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck\n  }\n\n  // useEffect(() => {\n  //   getAllPlanes().then(planeList => {\n  //     console.log('planeList: ' + planeList.length);\n  //     const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //     const firstPlane = shuffledPlanarDeck.pop();\n      \n  //     makeNewSession(firstPlane, shuffledPlanarDeck).then(session => {\n  //       setSession(session);\n  //       console.log(session);\n  //     });\n  //   });\n  // }, []);\n\n  \n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  getAllPlanes().then(planeList => {\n    console.log('planeList: ' + planeList.length);\n    const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n    const firstPlane = shuffledPlanarDeck.pop();\n    \n    makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n      setSession(newSession);\n      console.log(newSession);\n      navigate(`/${newSession.code}`, { state: newSession });\n    });\n  });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,EAAEC,cAAc,QAAQ,sBAAsB;AACnE,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,SAASC,WAAWA,CAACC,IAAI,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxC,IAAIE,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAIM,IAAI,GAAGP,IAAI,CAACC,CAAC,CAAC;MAClBD,IAAI,CAACC,CAAC,CAAC,GAAGD,IAAI,CAACG,CAAC,CAAC;MACjBH,IAAI,CAACG,CAAC,CAAC,GAAGI,IAAI;IAChB;IAEA,OAAOP,IAAI;EACb;EAEA,SAASQ,sBAAsBA,CAACC,SAAS,EAAE;IACzC,MAAMC,eAAe,GAAGf,kBAAkB,CAACc,SAAS,EAAEb,WAAW,CAAC;IAClE,MAAMe,YAAY,GAAGZ,WAAW,CAACW,eAAe,CAAC;IACjD,OAAOC,YAAY;EACrB;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMwB,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9BC,YAAY,CAAC,CAAC,CAACsB,IAAI,CAACN,SAAS,IAAI;IAC/BO,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGR,SAAS,CAACP,MAAM,CAAC;IAC7C,MAAMgB,kBAAkB,GAAGV,sBAAsB,CAACC,SAAS,CAAC;IAC5D,MAAMU,UAAU,GAAGD,kBAAkB,CAACE,GAAG,CAAC,CAAC;IAE3C1B,cAAc,CAACyB,UAAU,EAAED,kBAAkB,CAAC,CAACH,IAAI,CAACM,UAAU,IAAI;MAChER,UAAU,CAACQ,UAAU,CAAC;MACtBL,OAAO,CAACC,GAAG,CAACI,UAAU,CAAC;MACvBP,QAAQ,CAAE,IAAGO,UAAU,CAACC,IAAK,EAAC,EAAE;QAAEC,KAAK,EAAEF;MAAW,CAAC,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA;EACA;AACF;AAACvB,EAAA,CAjDuBD,UAAU;EAAA,QAiCfL,WAAW;AAAA;AAAAgC,EAAA,GAjCN3B,UAAU;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}