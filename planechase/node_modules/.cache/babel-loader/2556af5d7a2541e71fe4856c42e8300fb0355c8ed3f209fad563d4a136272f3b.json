{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\nexport default function NewSession() {\n  _s();\n  // Make plane deck\n  // Make session\n  // route to planechase component with session id\n\n  function importAll(r, set) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace(`../img/planes/${set}`, '')] = r(item);\n    });\n    return images;\n  }\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n    return deck;\n  }\n  function makeDeckAndShownPlanes(planeList) {\n    const planeImages = importAll(require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/), 'mtg');\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const tempMappedPlaneList = mappedPlaneList;\n    const shuffledDeck = shuffleDeck(tempMappedPlaneList);\n    return {\n      shuffledDeck: shuffledDeck,\n      imageMap: planeImages\n    };\n  }\n  useEffect(() => {\n    // get planes and make deck\n    // makeSession passing in first planeID and plane deck\n    // route to existingSession component\n\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const planeObj = makeDeckAndShownPlanes(planeList);\n      const firstPlane = planeObj.shuffledDeck.pop();\n      makeNewSession(firstPlane, planeObj.shuffledDeck, planeObj.imageMap).then(session => {\n        setSession(session);\n        console.log(session);\n        // setPlanarDeck(session.planarDeck);\n        // setActivePlane(session.plane);\n        // setCost(session.rollCost);\n        // setCurrentResult(getDieResultFromName(session.rollResult));\n        // setTimeout(() => {\n        //   setTimer(timer + 1);\n        // }, '2000');\n      });\n    });\n  }, []);\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  navigate(`/${session.code}`, session);\n  // return (\n  //   <div>\n  //     <div className='container'>\n  //       <Link to='/49'>new session</Link>\n  //     </div>\n  //     <Outlet />\n  //   </div>\n  // );\n}\n_s(NewSession, \"Yt2VjlzJN6aNLOmqdkvzGTQTGVM=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["React","useState","useEffect","Outlet","Link","useNavigate","getSession","setPlaneById","getAllPlanes","setRollInfo","makeNewSession","getMappedPlaneList","getDieResultFromName","NewSession","_s","importAll","r","set","images","keys","forEach","item","index","replace","shuffleDeck","deck","i","length","j","Math","floor","random","temp","makeDeckAndShownPlanes","planeList","planeImages","require","context","mappedPlaneList","tempMappedPlaneList","shuffledDeck","imageMap","then","console","log","planeObj","firstPlane","pop","session","setSession","planarDeck","setPlanarDeck","navigate","code","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Outlet, Link, useNavigate } from 'react-router-dom';\nimport { getSession, setPlaneById, getAllPlanes, setRollInfo, makeNewSession } from \"../tools/mongoApi.js\";\nimport { getMappedPlaneList, getDieResultFromName } from '../tools/utils.js';\n\nexport default function NewSession() {\n\n  // Make plane deck\n  // Make session\n  // route to planechase component with session id\n  \n  function importAll(r, set) {\n    let images = {};\n    r.keys().forEach((item, index) => {\n      images[item.replace(`../img/planes/${set}`, '')] = r(item);\n    });\n    return images;\n  }\n\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp; \n    }\n\n    return deck;\n  }\n\n  function makeDeckAndShownPlanes(planeList) {\n    const planeImages = importAll(\n      require.context('../img/planes', true, /\\.(png|jpe?g|svg)$/),\n      'mtg'\n    );\n\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const tempMappedPlaneList = mappedPlaneList;\n    const shuffledDeck = shuffleDeck(tempMappedPlaneList);\n    return {\n      shuffledDeck: shuffledDeck,\n      imageMap: planeImages\n    }\n  }\n\n  useEffect(() => {\n    // get planes and make deck\n    // makeSession passing in first planeID and plane deck\n    // route to existingSession component\n    \n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const planeObj = makeDeckAndShownPlanes(planeList);\n      const firstPlane = planeObj.shuffledDeck.pop();\n      \n      makeNewSession(firstPlane, planeObj.shuffledDeck, planeObj.imageMap).then(session => {\n        setSession(session);\n        console.log(session);\n        // setPlanarDeck(session.planarDeck);\n        // setActivePlane(session.plane);\n        // setCost(session.rollCost);\n        // setCurrentResult(getDieResultFromName(session.rollResult));\n        // setTimeout(() => {\n        //   setTimer(timer + 1);\n        // }, '2000');\n      });\n    });\n  }, []);\n\n  const [planarDeck, setPlanarDeck] = useState([]);\n  const [session, setSession] = useState(null);\n\n  const navigate = useNavigate();\n  navigate(`/${session.code}`, session);\n  // return (\n  //   <div>\n  //     <div className='container'>\n  //       <Link to='/49'>new session</Link>\n  //     </div>\n  //     <Outlet />\n  //   </div>\n  // );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}