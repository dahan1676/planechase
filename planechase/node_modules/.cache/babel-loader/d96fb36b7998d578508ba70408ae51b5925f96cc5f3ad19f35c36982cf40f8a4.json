{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from \"../tools/fetches.js\";\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewSession() {\n  _s();\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck;\n  }\n  function updateSearchText(event) {\n    const searchVal = event.target.value;\n    setSearchText(searchVal);\n  }\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {\n          return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1;\n        });\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, {\n          state: newSession\n        });\n      });\n    });\n  }\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Input\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter your scryfall search terms\",\n        onChange: event => updateSearchText(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Submit\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Submit\",\n        onClick: handleAll,\n        children: \"Give me all planes!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n\n  // getAllPlanes().then(planeList => {\n  //   console.log('planeList: ' + planeList.length);\n  //   const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //   const firstPlane = shuffledPlanarDeck.pop();\n\n  //   makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n  //     setSession(newSession);\n  //     console.log(newSession);\n  //     navigate(`/${newSession.code}`, { state: newSession });\n  //   });\n  // });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}\n_s(NewSession, \"vZjey7JS9Ls8vq9sKy+Fdw1NfuM=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["useState","useEffect","useNavigate","getAllPlanes","makeNewSession","searchScryfall","shuffleDeck","getMappedPlaneList","planeImages","jsxDEV","_jsxDEV","NewSession","_s","makeShuffledPlanarDeck","planeList","mappedPlaneList","shuffledDeck","updateSearchText","event","searchVal","target","value","setSearchText","handleSearch","results","searchText","console","log","handleAll","inputPlaneList","then","length","filter","plane","indexOf","name","toLowerCase","shuffledPlanarDeck","firstPlane","pop","newSession","navigate","code","state","children","className","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from \"../tools/fetches.js\";\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\n\nexport default function NewSession() {\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck\n  }\n\n  function updateSearchText(event) {\n    const searchVal = event.target.value;\n    setSearchText(searchVal);\n  }\n\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1});\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      \n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, { state: newSession });\n      });\n    });\n  }\n\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n\n\n  return (\n    <div>\n      <div className='Input'>\n        <input placeholder='Enter your scryfall search terms' onChange={event => updateSearchText(event)} />\n      </div>\n      <div className='Buttons'>\n        <button className='Submit' onClick={handleSearch}>Search</button>\n        <button className='Submit' onClick={handleAll}>Give me all planes!</button>\n      </div>\n    </div>\n  );\n\n  // getAllPlanes().then(planeList => {\n  //   console.log('planeList: ' + planeList.length);\n  //   const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //   const firstPlane = shuffledPlanarDeck.pop();\n    \n  //   makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n  //     setSession(newSession);\n  //     console.log(newSession);\n  //     navigate(`/${newSession.code}`, { state: newSession });\n  //   });\n  // });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}