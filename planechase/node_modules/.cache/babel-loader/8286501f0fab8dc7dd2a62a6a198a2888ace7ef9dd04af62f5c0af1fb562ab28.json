{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from \"../tools/fetches.js\";\nimport { getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewSession() {\n  _s();\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp;\n    }\n    return deck;\n  }\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck;\n  }\n  function updateSearchText(event) {\n    const searchVal = event.target.value;\n    setSearchText(searchVal);\n  }\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n  }\n  async function handleAll() {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        setSession(newSession);\n        console.log(newSession);\n        navigate(`/${newSession.code}`, {\n          state: newSession\n        });\n      });\n    });\n  }\n  const [searchText, setSearchText] = useState('');\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Scryfall\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"Scryfall Input\",\n      placeholder: \"Enter your scryfall search terms\",\n      onChange: event => updateSearchText(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Scryfall Submit\",\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Submit\",\n      onClick: handleAll,\n      children: \"Give me all planes!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n\n  // getAllPlanes().then(planeList => {\n  //   console.log('planeList: ' + planeList.length);\n  //   const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //   const firstPlane = shuffledPlanarDeck.pop();\n\n  //   makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n  //     setSession(newSession);\n  //     console.log(newSession);\n  //     navigate(`/${newSession.code}`, { state: newSession });\n  //   });\n  // });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}\n_s(NewSession, \"cks6hG8sGJf7dqqhzkKtIw0mS7E=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["useState","useEffect","useNavigate","getAllPlanes","makeNewSession","searchScryfall","getMappedPlaneList","planeImages","jsxDEV","_jsxDEV","NewSession","_s","shuffleDeck","deck","i","length","j","Math","floor","random","temp","makeShuffledPlanarDeck","planeList","mappedPlaneList","shuffledDeck","updateSearchText","event","searchVal","target","value","setSearchText","handleSearch","results","searchText","console","log","handleAll","then","shuffledPlanarDeck","firstPlane","pop","newSession","setSession","navigate","code","state","session","className","children","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/planechase/NewSession.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from \"../tools/fetches.js\";\nimport { getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\n\nexport default function NewSession() {\n  function shuffleDeck(deck) {\n    for (var i = deck.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = deck[i];\n      deck[i] = deck[j];\n      deck[j] = temp; \n    }\n\n    return deck;\n  }\n\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck\n  }\n\n  function updateSearchText(event) {\n    const searchVal = event.target.value;\n    setSearchText(searchVal);\n  }\n\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n  }\n\n  async function handleAll() {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      \n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        setSession(newSession);\n        console.log(newSession);\n        navigate(`/${newSession.code}`, { state: newSession });\n      });\n    });\n  }\n\n  const [searchText, setSearchText] = useState('');\n  const [session, setSession] = useState(null);\n  const navigate = useNavigate();\n\n\n  return (\n    <div className='Scryfall'>\n      <input className='Scryfall Input' placeholder='Enter your scryfall search terms' onChange={event => updateSearchText(event)} />\n      <button className='Scryfall Submit' onClick={handleSearch}>Search</button>\n      <button className='Submit' onClick={handleAll}>Give me all planes!</button>\n    </div>\n  )\n\n  // getAllPlanes().then(planeList => {\n  //   console.log('planeList: ' + planeList.length);\n  //   const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n  //   const firstPlane = shuffledPlanarDeck.pop();\n    \n  //   makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n  //     setSession(newSession);\n  //     console.log(newSession);\n  //     navigate(`/${newSession.code}`, { state: newSession });\n  //   });\n  // });\n\n  // if (session) {\n  //   navigate(`/${session.code}`, { state: session });\n  // }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}