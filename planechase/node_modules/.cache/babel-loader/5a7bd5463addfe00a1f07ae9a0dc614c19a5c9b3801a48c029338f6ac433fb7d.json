{"ast":null,"code":"var _jsxFileName = \"/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/InitSession.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from '../tools/fetches.js';\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport './InitSession.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewSession() {\n  _s();\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck;\n  }\n  function updateSearchText(event) {\n    const textVal = event.target.value;\n    const searchVal = `(${textVal.split('\\n').map(entry => {\n      return `name:\"${entry}\"`;\n    }).join(' or ')}) and (type:plane or type:phenomenon)`;\n    setSearchText(searchVal);\n  }\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {\n          return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1;\n        });\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, {\n          state: newSession\n        });\n      });\n    });\n  }\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Planechase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter a list of planes and phenomena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Ex:\\nGavony\\nPlanewide Disaster\\nEtc...\",\n        onChange: event => updateSearchText(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit\",\n        onClick: handleAll,\n        children: \"Give me all the planes!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(NewSession, \"vZjey7JS9Ls8vq9sKy+Fdw1NfuM=\", false, function () {\n  return [useNavigate];\n});\n_c = NewSession;\nvar _c;\n$RefreshReg$(_c, \"NewSession\");","map":{"version":3,"names":["useState","useNavigate","getAllPlanes","makeNewSession","searchScryfall","shuffleDeck","getMappedPlaneList","planeImages","jsxDEV","_jsxDEV","NewSession","_s","makeShuffledPlanarDeck","planeList","mappedPlaneList","shuffledDeck","updateSearchText","event","textVal","target","value","searchVal","split","map","entry","join","setSearchText","handleSearch","results","searchText","console","log","handleAll","inputPlaneList","then","length","filter","plane","indexOf","name","toLowerCase","shuffledPlanarDeck","firstPlane","pop","newSession","navigate","code","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/init/InitSession.js"],"sourcesContent":["import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getAllPlanes, makeNewSession, searchScryfall } from '../tools/fetches.js';\nimport { shuffleDeck, getMappedPlaneList } from '../tools/utils.js';\nimport { planeImages } from '../tools/consts.js';\nimport './InitSession.css';\n\nexport default function NewSession() {\n  function makeShuffledPlanarDeck(planeList) {\n    const mappedPlaneList = getMappedPlaneList(planeList, planeImages);\n    const shuffledDeck = shuffleDeck(mappedPlaneList);\n    return shuffledDeck\n  }\n\n  function updateSearchText(event) {\n    const textVal = event.target.value;\n    const searchVal = `(${textVal.split('\\n').map(entry => {return `name:\"${entry}\"`}).join(' or ')}) and (type:plane or type:phenomenon)`;\n    setSearchText(searchVal);\n  }\n\n  async function handleSearch() {\n    const results = await searchScryfall(searchText);\n    console.log('results: ' + results);\n    handleAll(results);\n  }\n\n  async function handleAll(inputPlaneList) {\n    getAllPlanes().then(planeList => {\n      console.log('planeList: ' + planeList.length);\n      if (inputPlaneList) {\n        planeList = planeList.filter(plane => {return inputPlaneList.indexOf(plane.name.toLowerCase()) > -1});\n      }\n      const shuffledPlanarDeck = makeShuffledPlanarDeck(planeList);\n      const firstPlane = shuffledPlanarDeck.pop();\n      \n      makeNewSession(firstPlane, shuffledPlanarDeck).then(newSession => {\n        console.log(newSession);\n        navigate(`/${newSession.code}`, { state: newSession });\n      });\n    });\n  }\n\n  const [searchText, setSearchText] = useState('');\n  const navigate = useNavigate();\n\n  return (\n    <div className='controls'>\n      <h1>Planechase</h1>\n      <p>Enter a list of planes and phenomena</p>\n      <div className='input'>\n        <textarea placeholder='Ex:&#10;Gavony&#10;Planewide Disaster&#10;Etc...' onChange={event => updateSearchText(event)} />\n      </div>\n      <div className='buttons'>\n        <button className='submit' onClick={handleSearch}>Search</button>\n        <button className='submit' onClick={handleAll}>Give me all the planes!</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}