{"ast":null,"code":"import { getMappedPlane, makeFullPlaneUrl } from \"./utils\";\nconst dataSource = 'dhuber-cluster-0';\nconst database = 'planechase';\nconst sessionCollection = 'sessions';\nfunction getHeaders() {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Accept', 'application/json');\n  headers.append('Access-Control-Request-Headers', '*');\n  headers.append('Access-Control-Allow-Origin', '*');\n  headers.append('api-key', 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO');\n}\nexport async function getSession(sessionCode, activePlane, imageMap) {\n  //   curl --location 'https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne' \\\n  // --header 'Content-Type: application/json' \\\n  // --header 'Access-Control-Request-Headers: *' \\\n  // --header 'api-key: kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO' \\\n  // --header 'Accept: application/json' \\\n  // --data '{\n  //       \"dataSource\": \"dhuber-cluster-0\",\n  //       \"database\": \"planechase\",\n  //       \"collection\": \"sessions\",\n  //       \"filter\": { \"_id\": \"ABCD\"  }\n  //   }'\n\n  console.log('setting up mongoDb');\n  if (sessionCode) {\n    console.log('getting session ' + sessionCode);\n    return await getExistingSession(sessionCode, imageMap);\n  }\n  console.log('making new session');\n  return await getNewSession(activePlane, imageMap);\n}\nasync function getNewSession(activePlane, imageMap) {\n  const body = JSON.stringify({\n    'dataSource': dataSource,\n    'database': database,\n    'collection': sessionCollection\n  });\n  return await fetch(`/planechaseSessions/makeSession/${activePlane.id}`).then(response => response.json()).then(data => {\n    console.log(data[0]);\n    const plane = getMappedPlane(data[1].fields, imageMap);\n    return {\n      code: data[0].pk,\n      plane: plane,\n      rollCost: data[0].fields.rollCost,\n      rollResult: data[0].fields.rollResult\n    };\n  }).catch(error => console.log('error making session: ' + error));\n}\nasync function getExistingSession(sessionCode, imageMap) {\n  const body = JSON.stringify({\n    'dataSource': dataSource,\n    'database': database,\n    'collection': sessionCollection,\n    'filter': {\n      '_id': 1\n    }\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: getHeaders(),\n    body: body,\n    mode: 'no-cors'\n  };\n\n  // fetch('https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne', requestOptions)\n  //   .then(response => response.json())\n  //   .then(data => sessionData = data)\n  //   .catch(error => console.error(error));\n  // console.log('session: ' + sessionData);\n\n  return await fetch(`/planechaseSessions/getSession/${sessionCode}`).then(response => response.json()).then(data => {\n    console.log(data[0]);\n    const plane = getMappedPlane(data[1].fields, imageMap);\n    return {\n      code: data[0].pk,\n      plane: plane,\n      rollCost: data[0].fields.rollCost,\n      rollResult: data[0].fields.rollResult\n    };\n  }).catch(error => console.log('error getting sessions: ' + error));\n}\nexport async function getAllPlanes() {\n  console.log('getAllPlanes');\n  return await fetch(`/planechaseSessions/getWebcamFriendlyPlanes`).then(response => response.json()).catch(error => console.log('error getting all planes: ' + error));\n}\nexport async function setPlaneById(sessionCode, planeId) {\n  console.log('planeId: ' + planeId);\n  return await fetch(`/planechaseSessions/setPlane/${sessionCode}/${planeId}`).then(response => response.json()).catch(error => console.log('error setting the plane: ' + error));\n}\nexport async function setRollInfo(sessionCode, rollCost, rollResult) {\n  console.log(`Roll cost: ${rollCost}, result: ${rollResult}`);\n  return await fetch(`/planechaseSessions/setRollInfo/${sessionCode}/${rollCost}/${rollResult}`).then(response => response.json()).catch(error => console.log('error setting the roll info: ' + error));\n}","map":{"version":3,"names":["getMappedPlane","makeFullPlaneUrl","dataSource","database","sessionCollection","getHeaders","headers","Headers","append","getSession","sessionCode","activePlane","imageMap","console","log","getExistingSession","getNewSession","body","JSON","stringify","fetch","id","then","response","json","data","plane","fields","code","pk","rollCost","rollResult","catch","error","requestOptions","method","mode","getAllPlanes","setPlaneById","planeId","setRollInfo"],"sources":["/Users/danhuber/Desktop/development/planechase-new/planechase/src/tools/mongoApi.js"],"sourcesContent":["import { getMappedPlane, makeFullPlaneUrl } from \"./utils\";\n\nconst dataSource = 'dhuber-cluster-0';\nconst database = 'planechase';\nconst sessionCollection = 'sessions';\n\nfunction getHeaders() {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Accept', 'application/json');\n  headers.append('Access-Control-Request-Headers', '*');\n  headers.append('Access-Control-Allow-Origin', '*');\n  headers.append('api-key', 'kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO');\n}\n\nexport async function getSession(sessionCode, activePlane, imageMap) {\n//   curl --location 'https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne' \\\n// --header 'Content-Type: application/json' \\\n// --header 'Access-Control-Request-Headers: *' \\\n// --header 'api-key: kqhoHk09XphZcWMeBlGUOgDSXwvQDDkkn5mRXreTwyV6afivwZYiTnit6JSt7JyO' \\\n// --header 'Accept: application/json' \\\n// --data '{\n//       \"dataSource\": \"dhuber-cluster-0\",\n//       \"database\": \"planechase\",\n//       \"collection\": \"sessions\",\n//       \"filter\": { \"_id\": \"ABCD\"  }\n//   }'\n\nconsole.log('setting up mongoDb');\n\nif (sessionCode) {\n  console.log('getting session ' + sessionCode);\n  return await getExistingSession(sessionCode, imageMap);\n} \n  \nconsole.log('making new session');\nreturn await getNewSession(activePlane, imageMap);\n}\n\nasync function getNewSession(activePlane, imageMap) {\n  const body = JSON.stringify({\n    'dataSource': dataSource,\n    'database': database,\n    'collection': sessionCollection\n  });\n\n  return await fetch(`/planechaseSessions/makeSession/${activePlane.id}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data[0]);\n      const plane = getMappedPlane(data[1].fields, imageMap);\n      return {\n        code: data[0].pk,\n        plane: plane,\n        rollCost: data[0].fields.rollCost,\n        rollResult: data[0].fields.rollResult\n      };\n    })\n    .catch(error => console.log('error making session: ' + error));\n}\n\nasync function getExistingSession(sessionCode, imageMap) {\n  const body = JSON.stringify({\n    'dataSource': dataSource,\n    'database': database,\n    'collection': sessionCollection,\n    'filter': { '_id': 1 }\n  });\n\n  const requestOptions = {\n    method: 'POST',\n    headers: getHeaders(),\n    body: body,\n    mode: 'no-cors'\n  }\n\n  // fetch('https://us-east-1.aws.data.mongodb-api.com/app/data-napyt/endpoint/data/v1/action/findOne', requestOptions)\n  //   .then(response => response.json())\n  //   .then(data => sessionData = data)\n  //   .catch(error => console.error(error));\n  // console.log('session: ' + sessionData);\n\n  return await fetch(`/planechaseSessions/getSession/${sessionCode}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data[0]);\n      const plane = getMappedPlane(data[1].fields, imageMap);\n      return {\n        code: data[0].pk,\n        plane: plane,\n        rollCost: data[0].fields.rollCost,\n        rollResult: data[0].fields.rollResult\n      };\n    })\n    .catch(error => console.log('error getting sessions: ' + error));\n}\n\nexport async function getAllPlanes() {\n  console.log('getAllPlanes');\n  return await fetch(`/planechaseSessions/getWebcamFriendlyPlanes`)\n    .then(response => response.json())\n    .catch(error => console.log('error getting all planes: ' + error));\n}\n\nexport async function setPlaneById(sessionCode, planeId) {\n  console.log('planeId: ' + planeId);\n  return await fetch(`/planechaseSessions/setPlane/${sessionCode}/${planeId}`)\n    .then(response => response.json())\n    .catch(error => console.log('error setting the plane: ' + error));\n}\n\nexport async function setRollInfo(sessionCode, rollCost, rollResult) {\n  console.log(`Roll cost: ${rollCost}, result: ${rollResult}`);\n  return await fetch(`/planechaseSessions/setRollInfo/${sessionCode}/${rollCost}/${rollResult}`)\n    .then(response => response.json())\n    .catch(error => console.log('error setting the roll info: ' + error));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}